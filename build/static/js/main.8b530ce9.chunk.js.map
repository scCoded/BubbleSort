{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleStartClick","inputValidation","state","sorting","setState","isAddButtonVisible","disabled","isStartButtonDisabled","sort","alert","finished","passes","currentIndex","len","swapped","list","applyComparisonIndicator","applyHighlightToSwappingItems","temp","swaps","setTimeout","removeHighlightFromSwappedItems","removeComparisonIndicator","document","querySelectorAll","forEach","el","classList","remove","this","e","index","target","value","validInput","re","RegExp","some","item","test","querySelector","add","window","location","reload","className","map","id","key","onChange","handleChange","onClick","addItem","refreshClick","Component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOA+JeA,G,wDAzJb,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAsCVC,iBAAmB,WACjB,OAAK,EAAKC,mBAEN,EAAKC,MAAMC,UAGX,EAAKC,SAAS,CACZC,oBAAoB,EACpBC,UAAU,EACVC,uBAAuB,SAEzB,EAAKC,QATAC,MAAM,qDAzCE,EAsDnBC,SAAW,WACT,EAAKN,SAAS,CACZD,SAAS,EACTQ,OAAQ,EAAKT,MAAMS,OAAS,EAC5BJ,uBAAuB,IAExBE,MAAM,qBA5DU,EA8DnBD,KAAO,WACH,GAAI,EAAKN,MAAMU,eAAiB,EAAKV,MAAMW,IAAM,EAAG,CAChD,IAA2B,IAAvB,EAAKX,MAAMY,QACb,OAAO,EAAKJ,WAEd,EAAKN,SAAS,CACZQ,aAAc,EACdD,OAAQ,EAAKT,MAAMS,OAAS,EAC5BE,IAAK,EAAKX,MAAMW,IAAM,EACtBC,SAAS,IAGf,GAAuB,IAAnB,EAAKZ,MAAMW,IACb,OAAO,EAAKH,WACd,EAAKN,SAAS,CAAED,SAAS,IACzB,IAAIW,GAAU,EACVF,EAAe,EAAKV,MAAMU,aAC1BG,EAAO,EAAKb,MAAMa,KAEtB,GADA,EAAKC,2BACDD,EAAKH,GAAgBG,EAAKH,EAAe,GAAI,CAC7C,EAAKK,gCACL,IAAIC,EAAOH,EAAKH,GAChBG,EAAKH,GAAgBG,EAAKH,EAAe,GACzCG,EAAKH,EAAe,GAAKM,EACzBJ,GAAU,EACV,EAAKV,SAAS,CACZe,MAAO,EAAKjB,MAAMiB,MAAQ,EAC1BJ,KAAMA,EACND,QAASA,IAGf,EAAKV,SAAS,CAAEQ,aAAc,EAAKV,MAAMU,aAAe,IACpDE,GACFM,WAAW,EAAKC,gCAAiC,KACnDD,WAAW,EAAKE,0BAA2B,KAC3CF,WAAW,EAAKZ,KAAM,MAjGP,EAoGnBa,gCAAkC,WAChCE,SAASC,iBAAiB,SAASC,SAAQ,SAACC,GAAD,OAAQA,EAAGC,UAAUC,OAAO,iBArGtD,EAkHnBN,0BAA4B,WAC1BC,SAASC,iBAAiB,OAAOC,SAAQ,SAACC,GAAD,OAAQA,EAAGC,UAAUC,OAAO,kBAjHnE,EAAK1B,MAAQ,CACTa,KAAM,GACNF,IAAK,EACLM,MAAO,EACPR,OAAS,EACTR,SAAS,EACTS,aAAc,EACdP,oBAAqB,EACrBE,uBAAwB,EACxBD,UAAU,EACVQ,SAAS,GAZE,E,2CAiBnB,WACEe,KAAKzB,SAAS,CAAEW,KAAK,GAAD,mBAAMc,KAAK3B,MAAMa,MAAjB,CAAuB,OAC3Cc,KAAKzB,SAAS,CAAES,IAAKgB,KAAK3B,MAAMW,IAAM,M,0BAGxC,SAAaiB,EAAGC,GACdF,KAAK3B,MAAMa,KAAKgB,GAASD,EAAEE,OAAOC,MAClCJ,KAAKzB,SAAS,CAAEW,KAAMc,KAAK3B,MAAMa,S,6BAInC,WACE,IAAImB,GAAa,EACbC,EAAK,IAAIC,OAAO,wBAMpB,OALAP,KAAK3B,MAAMa,KAAKsB,MAAK,SAAUC,GAC7B,IAAKH,EAAGI,KAAKD,GACX,OAAOJ,GAAc,KAGlBA,I,2CAoET,WACEX,SAASiB,cAAc,SAAWX,KAAK3B,MAAMU,cAAce,UAAUc,IAAI,aACzElB,SAASiB,cAAc,UAAYX,KAAK3B,MAAMU,aAAe,IAAIe,UAAUc,IAAI,e,sCAGjF,WACElB,SAASiB,cAAc,WAAaX,KAAK3B,MAAMU,cAAce,UAAUc,IAAI,cAC3ElB,SAASiB,cAAc,YAAcX,KAAK3B,MAAMU,aAAe,IAAIe,UAAUc,IAAI,gB,0BAOnF,WACEC,OAAOC,SAASC,W,oBAGlB,WAAU,IAAD,OACL,OACI,yBAAKC,UAAU,aACZ,2CACA,8GACA,yBAAKA,UAAU,kBAEZhB,KAAK3B,MAAMa,KAAK+B,KAAI,SAACR,EAAMP,GACzB,OACI,yBAAKgB,GAAE,iBAAYhB,GAASiB,IAAKjB,GAC/B,2BAAOgB,GAAE,eAAUhB,GAASkB,SAAU,SAACnB,GAAD,OAAO,EAAKoB,aAAapB,EAAGC,IAAQE,MAASK,EAAMhC,SAAa,EAAKJ,MAAMI,SAAW,WAAa,UAOlJ,4BAAQuC,UAAU,MAAMM,QAAS,SAACrB,GAAD,OAAO,EAAKsB,QAAQtB,IAAIxB,WAAauB,KAAK3B,MAAMG,oBAAsBwB,KAAK3B,MAAMW,IAAM,IAAxH,YAGD,4BAAQgC,UAAU,QAAQM,QAAStB,KAAK7B,iBAAkBM,YAAauB,KAAK3B,MAAMK,uBAAyBsB,KAAK3B,MAAMW,IAAM,IAA5H,SAGA,4BAAQgC,UAAU,QAAQM,QAAStB,KAAKwB,cAAxC,SACA,sCAAYxB,KAAK3B,MAAMiB,OACvB,sCAAYU,KAAK3B,MAAMS,a,GArJnB2C,cCQEC,QACW,cAA7Bb,OAAOC,SAASa,UAEe,UAA7Bd,OAAOC,SAASa,UAEhBd,OAAOC,SAASa,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpC,SAASqC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8b530ce9.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n \r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          list: [],\r\n          len: 0,\r\n          swaps: 0,\r\n          passes : 0,\r\n          sorting: false,\r\n          currentIndex: 0,\r\n          isAddButtonVisible : true,\r\n          isStartButtonDisabled : true,\r\n          disabled: false,\r\n          swapped: false\r\n      };\r\n  }\r\n\r\n\r\n  addItem() {\r\n    this.setState({ list: [...this.state.list, \"\"] })\r\n    this.setState({ len: this.state.len + 1 })\r\n  }\r\n \r\n  handleChange(e, index) {\r\n    this.state.list[index] = e.target.value\r\n    this.setState({ list: this.state.list })\r\n\r\n  }\r\n\r\n  inputValidation() {\r\n    let validInput = true;\r\n    var re = new RegExp(\"^([a-zA-Z0-9]){1,9}$\");\r\n    this.state.list.some(function (item) {\r\n      if (!re.test(item)) {\r\n        return validInput =  false;\r\n      }\r\n    });\r\n    return validInput;\r\n  }\r\n\r\n  handleStartClick = () => {\r\n    if (!this.inputValidation())\r\n      return alert(\"Please make sure inputs is filled out correctly.\");\r\n    if (this.state.sorting) {\r\n        return false;\r\n    } else {\r\n        this.setState({\r\n          isAddButtonVisible: false,\r\n          disabled: true,\r\n          isStartButtonDisabled: true\r\n        })\r\n        this.sort();\r\n    }\r\n  }\r\n\r\n  finished = () => {\r\n    this.setState({ \r\n      sorting: false,\r\n      passes: this.state.passes + 1,\r\n      isStartButtonDisabled: true\r\n     });\r\n     alert('Finished Sorting');\r\n  }\r\n  sort = () => {\r\n      if (this.state.currentIndex === this.state.len - 1) {  \r\n          if (this.state.swapped === false) {\r\n            return this.finished();\r\n          }\r\n          this.setState({\r\n            currentIndex: 0,\r\n            passes: this.state.passes + 1,\r\n            len: this.state.len - 1,\r\n            swapped: false\r\n          })\r\n      }\r\n      if (this.state.len === 1)\r\n        return this.finished();\r\n      this.setState({ sorting: true })\r\n      let swapped = false;\r\n      let currentIndex = this.state.currentIndex;\r\n      let list = this.state.list;\r\n      this.applyComparisonIndicator();\r\n      if (list[currentIndex] > list[currentIndex + 1]) {\r\n          this.applyHighlightToSwappingItems();\r\n          let temp = list[currentIndex];\r\n          list[currentIndex] = list[currentIndex + 1];\r\n          list[currentIndex + 1] = temp;\r\n          swapped = true;\r\n          this.setState({ \r\n            swaps: this.state.swaps + 1,\r\n            list: list,\r\n            swapped: swapped\r\n          });\r\n      }\r\n      this.setState({ currentIndex: this.state.currentIndex + 1 });\r\n      if (swapped)\r\n        setTimeout(this.removeHighlightFromSwappedItems, 1000);\r\n      setTimeout(this.removeComparisonIndicator, 1000);\r\n      setTimeout(this.sort, 2000);\r\n  }\r\n\r\n  removeHighlightFromSwappedItems = () => {\r\n    document.querySelectorAll('input').forEach((el) => el.classList.remove('highlight'));\r\n  }\r\n\r\n  applyHighlightToSwappingItems() {\r\n    document.querySelector(\"#text-\" + this.state.currentIndex).classList.add('highlight');\r\n    document.querySelector(\"#text-\" + (this.state.currentIndex + 1)).classList.add('highlight');\r\n  }\r\n\r\n  applyComparisonIndicator() {\r\n    document.querySelector(\"#bubble-\" + this.state.currentIndex).classList.add('comparison');\r\n    document.querySelector(\"#bubble-\" + (this.state.currentIndex + 1)).classList.add('comparison');\r\n  }\r\n\r\n  removeComparisonIndicator = () => {\r\n    document.querySelectorAll('div').forEach((el) => el.classList.remove('comparison'));\r\n  }\r\n\r\n  refreshClick() {\r\n    window.location.reload();\r\n  }\r\n\r\n  render() {\r\n      return (\r\n          <div className='container'>\r\n             <h1>Bubble Sort</h1>\r\n             <h3>Add numbers or characters A-z (limit 8), then press Begin to bubble sort them.</h3>\r\n             <div className='list-container'>\r\n              {\r\n                this.state.list.map((item, index) => {\r\n                  return (\r\n                      <div id={`bubble-${index}`} key={index}>\r\n                        <input id={`text-${index}`} onChange={(e) => this.handleChange(e, index)} value = {item} disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                      </div>\r\n                  )\r\n                })\r\n              }\r\n             </div>\r\n             {\r\n               <button className=\"add\" onClick={(e) => this.addItem(e)} disabled = {(this.state.isAddButtonVisible && this.state.len < 8 ? false : true )}>Add Item</button>\r\n             }\r\n             {\r\n              <button className=\"start\" onClick={this.handleStartClick} disabled = {(this.state.isStartButtonDisabled && this.state.len < 3) ? true : false } >Begin</button>\r\n             }\r\n\r\n              <button className=\"reset\" onClick={this.refreshClick} >Reset</button>\r\n              <p>swaps:  {this.state.swaps}</p>\r\n              <p>passes: {this.state.passes}</p>\r\n          </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}